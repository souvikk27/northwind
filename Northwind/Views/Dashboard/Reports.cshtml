@model Northwind.ViewModels.ReportsViewModel
@{
    ViewData["Title"] = "Reports";
    Layout = "Layouts/_LayoutsDash";
}

<div class="ml-[250px] p-6">
    <!-- Header Section -->
    <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 class="text-2xl font-bold text-gray-800">Sales Reports</h1>
        <div class="mt-4 flex items-center space-x-3 sm:mt-0">
            <div class="relative inline-block">
                <select class="appearance-none rounded-lg border border-gray-300 bg-white py-2 pl-4 pr-10 text-sm font-medium text-gray-700 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                    <option>Last 30 days</option>
                    <option>Last 90 days</option>
                    <option>Last 12 months</option>
                    <option>All time</option>
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </div>
            </div>
            <button class="flex items-center rounded-lg bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                </svg>
                Export Report
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="mb-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        <!-- Total Sales Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-indigo-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Total Sales</h2>
                    <p class="text-2xl font-bold text-gray-800">$@Model.MonthlySales.Sum(m => m.TotalSales).ToString("N0")</p>
                </div>
            </div>
        </div>

        <!-- Average Order Value Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-emerald-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Avg. Order Value</h2>
                    <p class="text-2xl font-bold text-gray-800">$@((Model.MonthlySales.Sum(m => m.TotalSales) / 830).ToString("N0"))</p>
                </div>
            </div>
        </div>

        <!-- Top Category Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-amber-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Top Category</h2>
                    <p class="text-2xl font-bold text-gray-800">@(Model.SalesByCategory.FirstOrDefault()?.CategoryName ?? "N/A")</p>
                </div>
            </div>
        </div>

        <!-- Top Country Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Top Country</h2>
                    <p class="text-2xl font-bold text-gray-800">@(Model.SalesByCountry.FirstOrDefault()?.Country ?? "N/A")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
        <!-- Monthly Sales Trend -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <h2 class="mb-4 text-lg font-semibold text-gray-800">Monthly Sales Trend</h2>
            <div class="h-80">
                <canvas id="monthlySalesChart"></canvas>
            </div>
        </div>

        <!-- Sales by Category -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <h2 class="mb-4 text-lg font-semibold text-gray-800">Sales by Category</h2>
            <div class="h-80">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>

        <!-- Top Products -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <div class="mb-4 flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-800">Top Products</h2>
                <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-800">View All</a>
            </div>
            <div class="overflow-hidden">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-200">
                            <th class="py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Product</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Sales</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Share</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var totalTopProductSales = Model.TopProducts.Sum(p => p.TotalSales);
                        }
                        @foreach (var product in Model.TopProducts)
                        {
                            var percentage = (product.TotalSales / totalTopProductSales) * 100;
                            <tr class="border-b border-gray-200">
                                <td class="py-4 text-sm font-medium text-gray-900">@product.ProductName</td>
                                <td class="py-4 text-right text-sm text-gray-500">$@product.TotalSales.ToString("N0")</td>
                                <td class="py-4 text-right text-sm text-gray-500">@percentage.ToString("N1")%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Sales by Country -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <div class="mb-4 flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-800">Sales by Country</h2>
                <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-800">View All</a>
            </div>
            <div class="overflow-hidden">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-200">
                            <th class="py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Country</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Sales</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Share</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var totalCountrySales = Model.SalesByCountry.Sum(c => c.TotalSales);
                            var topCountries = Model.SalesByCountry.Take(5).ToList();
                        }
                        @foreach (var country in topCountries)
                        {
                            var percentage = (country.TotalSales / totalCountrySales) * 100;
                            <tr class="border-b border-gray-200">
                                <td class="py-4 text-sm font-medium text-gray-900">@country.Country</td>
                                <td class="py-4 text-right text-sm text-gray-500">$@country.TotalSales.ToString("N0")</td>
                                <td class="py-4 text-right text-sm text-gray-500">@percentage.ToString("N1")%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Colors
            const colors = {
                primary: '#4F46E5',
                secondary: '#10B981',
                tertiary: '#F59E0B',
                quaternary: '#EC4899',
                info: '#3B82F6',
                success: '#22C55E',
                warning: '#F97316',
                danger: '#EF4444',
                light: '#F3F4F6',
                dark: '#1F2937',
                // Gradients and transparencies
                primaryTransparent: 'rgba(79, 70, 229, 0.2)',
                secondaryTransparent: 'rgba(16, 185, 129, 0.2)',
                tertiaryTransparent: 'rgba(245, 158, 11, 0.2)',
                quaternaryTransparent: 'rgba(236, 72, 153, 0.2)',
            };

            // Monthly Sales Chart
            const monthlySalesCtx = document.getElementById('monthlySalesChart').getContext('2d');
            
            new Chart(monthlySalesCtx, {
                type: 'line',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.MonthlySales.Select(m => $"'{m.MonthName} {m.Year}'")))],
                    datasets: [{
                        label: 'Monthly Sales',
                        data: [@string.Join(",", Model.MonthlySales.Select(m => m.TotalSales))],
                        borderColor: colors.primary,
                        backgroundColor: function(context) {
                            const chart = context.chart;
                            const {ctx, chartArea} = chart;
                            if (!chartArea) {
                                return null;
                            }
                            const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
                            gradient.addColorStop(0, 'rgba(79, 70, 229, 0.0)');
                            gradient.addColorStop(1, 'rgba(79, 70, 229, 0.2)');
                            return gradient;
                        },
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: colors.primary,
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 4,
                        pointHoverRadius: 6,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1F2937',
                            bodyColor: '#4B5563',
                            borderColor: '#E5E7EB',
                            borderWidth: 1,
                            padding: 12,
                            boxPadding: 6,
                            usePointStyle: true,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += '$' + context.parsed.y.toLocaleString();
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                borderDash: [2, 4],
                                color: '#E5E7EB'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Category Chart
            const categoryChartCtx = document.getElementById('categoryChart').getContext('2d');
            
            new Chart(categoryChartCtx, {
                type: 'doughnut',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.SalesByCategory.Select(c => $"'{c.CategoryName}'")))],
                    datasets: [{
                        data: [@string.Join(",", Model.SalesByCategory.Select(c => c.TotalSales))],
                        backgroundColor: [
                            colors.primary,
                            colors.secondary,
                            colors.tertiary,
                            colors.quaternary,
                            colors.info,
                            colors.success,
                            colors.warning,
                            colors.danger
                        ],
                        borderWidth: 0,
                        hoverOffset: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1F2937',
                            bodyColor: '#4B5563',
                            borderColor: '#E5E7EB',
                            borderWidth: 1,
                            padding: 12,
                            boxPadding: 6,
                            usePointStyle: true,
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, data) => acc + data, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: $${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}
