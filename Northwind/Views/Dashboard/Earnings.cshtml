@model Northwind.ViewModels.EarningsViewModel
@{
    ViewData["Title"] = "Earnings";
    Layout = "Layouts/_LayoutsDash";
}

<div class="ml-[250px] p-6">
    <!-- Header Section -->
    <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-800">Earnings</h1>
            <p class="text-gray-600">View and analyze your earnings data</p>
        </div>
        <div class="mt-4 flex items-center space-x-3 sm:mt-0">
            <div class="relative inline-block">
                <select class="appearance-none rounded-lg border border-gray-300 bg-white py-2 pl-4 pr-10 text-sm font-medium text-gray-700 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                    <option>Last 30 days</option>
                    <option>Last 90 days</option>
                    <option>Last 12 months</option>
                    <option>Year to date</option>
                    <option>Custom range</option>
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </div>
            </div>
            <button class="flex items-center rounded-lg bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                <svg xmlns="http://www.w3.org/2000/svg" class="mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                </svg>
                Export Report
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="mb-6 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        <!-- Total Earnings Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-indigo-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Total Earnings</h2>
                    <p class="text-2xl font-bold text-gray-800">$@Model.TotalEarnings.ToString("N0")</p>
                </div>
            </div>
        </div>

        <!-- Current Month Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-emerald-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-emerald-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Current Month</h2>
                    <p class="text-2xl font-bold text-gray-800">$@Model.CurrentMonthEarnings.ToString("N0")</p>
                    @if (Model.MonthOverMonthChange > 0)
                    {
                        <p class="text-sm font-medium text-emerald-600">
                            <span class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="mr-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
                                </svg>
                                @Model.MonthOverMonthPercentChange.ToString("0.0")%
                            </span>
                        </p>
                    }
                    else
                    {
                        <p class="text-sm font-medium text-red-600">
                            <span class="flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="mr-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                                </svg>
                                @Math.Abs(Model.MonthOverMonthPercentChange).ToString("0.0")%
                            </span>
                        </p>
                    }
                </div>
            </div>
        </div>

        <!-- YTD Earnings Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-amber-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">YTD Earnings</h2>
                    <p class="text-2xl font-bold text-gray-800">$@Model.YearToDateEarnings.ToString("N0")</p>
                </div>
            </div>
        </div>

        <!-- Projected Annual Card -->
        <div class="overflow-hidden rounded-lg bg-white p-4 shadow-sm transition-all duration-300 hover:shadow-md">
            <div class="flex items-center">
                <div class="flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                    </svg>
                </div>
                <div class="ml-4">
                    <h2 class="font-semibold text-gray-500">Projected Annual</h2>
                    <p class="text-2xl font-bold text-gray-800">$@Model.ProjectedAnnualEarnings.ToString("N0")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
        <!-- Monthly Earnings Chart -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <h2 class="mb-4 text-lg font-semibold text-gray-800">Monthly Earnings</h2>
            <div class="h-80">
                <canvas id="monthlyEarningsChart"></canvas>
            </div>
        </div>

        <!-- Earnings Breakdown Chart -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <h2 class="mb-4 text-lg font-semibold text-gray-800">Earnings Breakdown</h2>
            <div class="h-80">
                <canvas id="earningsBreakdownChart"></canvas>
            </div>
        </div>

        <!-- Earnings by Category -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <div class="mb-4 flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-800">Earnings by Category</h2>
                <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-800">View All</a>
            </div>
            <div class="overflow-hidden">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-200">
                            <th class="py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Category</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Amount</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Share</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var totalCategoryAmount = Model.CategoryEarnings.Sum(c => c.Amount);
                        }
                        @foreach (var category in Model.CategoryEarnings.OrderByDescending(c => c.Amount).Take(5))
                        {
                            var percentage = (category.Amount / totalCategoryAmount) * 100;
                            <tr class="border-b border-gray-200">
                                <td class="py-4 text-sm font-medium text-gray-900">@category.Category</td>
                                <td class="py-4 text-right text-sm text-gray-500">$@category.Amount.ToString("N0")</td>
                                <td class="py-4 text-right text-sm text-gray-500">@percentage.ToString("N1")%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Earnings by Customer -->
        <div class="overflow-hidden rounded-lg bg-white p-6 shadow-sm">
            <div class="mb-4 flex items-center justify-between">
                <h2 class="text-lg font-semibold text-gray-800">Top Customers</h2>
                <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-800">View All</a>
            </div>
            <div class="overflow-hidden">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-200">
                            <th class="py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Customer</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Amount</th>
                            <th class="py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">Share</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var totalCustomerAmount = Model.CustomerEarnings.Sum(c => c.Amount);
                        }
                        @foreach (var customer in Model.CustomerEarnings)
                        {
                            var percentage = (customer.Amount / totalCustomerAmount) * 100;
                            <tr class="border-b border-gray-200">
                                <td class="py-4 text-sm font-medium text-gray-900">@customer.Customer</td>
                                <td class="py-4 text-right text-sm text-gray-500">$@customer.Amount.ToString("N0")</td>
                                <td class="py-4 text-right text-sm text-gray-500">@percentage.ToString("N1")%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Detailed Earnings Table -->
    <div class="mt-6 overflow-hidden rounded-lg bg-white shadow-sm">
        <div class="border-b border-gray-200 px-6 py-4">
            <h2 class="text-lg font-medium text-gray-800">Monthly Earnings Details</h2>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                            Month
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                            Base Amount
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                            Commissions
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                            Bonuses
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                            Taxes
                        </th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500">
                            Net Earnings
                        </th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white">
                    @foreach (var earning in Model.MonthlyEarnings)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">
                                @earning.MonthYear
                            </td>
                            <td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
                                $@earning.BaseAmount.ToString("N0")
                            </td>
                            <td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
                                $@earning.Commissions.ToString("N0")
                            </td>
                            <td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
                                $@earning.Bonuses.ToString("N0")
                            </td>
                            <td class="whitespace-nowrap px-6 py-4 text-right text-sm text-gray-500">
                                $@earning.Taxes.ToString("N0")
                            </td>
                            <td class="whitespace-nowrap px-6 py-4 text-right text-sm font-medium text-gray-900">
                                $@earning.NetEarnings.ToString("N0")
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot class="bg-gray-50">
                    <tr>
                        <th scope="row" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                            Total
                        </th>
                        <td class="whitespace-nowrap px-6 py-3 text-right text-xs font-medium text-gray-900">
                            $@Model.MonthlyEarnings.Sum(e => e.BaseAmount).ToString("N0")
                        </td>
                        <td class="whitespace-nowrap px-6 py-3 text-right text-xs font-medium text-gray-900">
                            $@Model.TotalCommissions.ToString("N0")
                        </td>
                        <td class="whitespace-nowrap px-6 py-3 text-right text-xs font-medium text-gray-900">
                            $@Model.TotalBonuses.ToString("N0")
                        </td>
                        <td class="whitespace-nowrap px-6 py-3 text-right text-xs font-medium text-gray-900">
                            $@Model.TotalTaxes.ToString("N0")
                        </td>
                        <td class="whitespace-nowrap px-6 py-3 text-right text-xs font-medium text-gray-900">
                            $@Model.TotalEarnings.ToString("N0")
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Colors
            const colors = {
                primary: '#4F46E5',
                secondary: '#10B981',
                tertiary: '#F59E0B',
                quaternary: '#EC4899',
                info: '#3B82F6',
                success: '#22C55E',
                warning: '#F97316',
                danger: '#EF4444',
                light: '#F3F4F6',
                dark: '#1F2937',
                // Gradients and transparencies
                primaryTransparent: 'rgba(79, 70, 229, 0.2)',
                secondaryTransparent: 'rgba(16, 185, 129, 0.2)',
                tertiaryTransparent: 'rgba(245, 158, 11, 0.2)',
                quaternaryTransparent: 'rgba(236, 72, 153, 0.2)',
            };

            // Monthly Earnings Chart
            const monthlyEarningsCtx = document.getElementById('monthlyEarningsChart').getContext('2d');
            
            new Chart(monthlyEarningsCtx, {
                type: 'bar',
                data: {
                    labels: [@Html.Raw(string.Join(",", Model.MonthlyEarnings.Select(m => $"'{m.MonthName} {m.Year}'")))],
                    datasets: [{
                        label: 'Net Earnings',
                        data: [@string.Join(",", Model.MonthlyEarnings.Select(m => m.NetEarnings))],
                        backgroundColor: colors.primary,
                        borderColor: colors.primary,
                        borderWidth: 1,
                        borderRadius: 4,
                        barThickness: 16,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1F2937',
                            bodyColor: '#4B5563',
                            borderColor: '#E5E7EB',
                            borderWidth: 1,
                            padding: 12,
                            boxPadding: 6,
                            usePointStyle: true,
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += '$' + context.parsed.y.toLocaleString();
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        },
                        y: {
                            beginAtZero: true,
                            grid: {
                                borderDash: [2, 4],
                                color: '#E5E7EB'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Earnings Breakdown Chart
            const earningsBreakdownCtx = document.getElementById('earningsBreakdownChart').getContext('2d');
            
            new Chart(earningsBreakdownCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Base Salary', 'Commissions', 'Bonuses', 'Taxes'],
                    datasets: [{
                        data: [
                            @Model.MonthlyEarnings.Sum(e => e.BaseAmount),
                            @Model.TotalCommissions,
                            @Model.TotalBonuses,
                            @Model.TotalTaxes
                        ],
                        backgroundColor: [
                            colors.primary,
                            colors.secondary,
                            colors.tertiary,
                            colors.danger
                        ],
                        borderWidth: 0,
                        hoverOffset: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                usePointStyle: true,
                                padding: 20,
                                font: {
                                    size: 12
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#1F2937',
                            bodyColor: '#4B5563',
                            borderColor: '#E5E7EB',
                            borderWidth: 1,
                            padding: 12,
                            boxPadding: 6,
                            usePointStyle: true,
                            callbacks: {
                                label: function(context) {
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, data) => acc + data, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: $${value.toLocaleString()} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}
